import _merge from 'lodash/merge';
import _union from 'lodash/union';
import _without from 'lodash/without';
import _cloneDeep from 'lodash/cloneDeep';
import { createReducer } from '@reduxjs/toolkit';

import * as actions from './{{ properCase name }}.actions';

import { normalize } from 'services/normalization';

const initialState: {{ properCase name }}State = {
  allIds: [],
  byIds: {},
  isCreating: false,
  isFetching: [],
  isUpdating: '',
  isDeleting: '',
};

export default createReducer<{{ properCase name }}State>(initialState, {
  [actions.create{{ properCase name }}.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.create{{ properCase name }}>,
  ): {{ properCase name }}State => ({
    ...state,
    isCreating: true,
  }),
  [actions.create{{ properCase name }}Error.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.create{{ properCase name }}Error>,
  ): {{ properCase name }}State => {
    if (process.env.NODE_ENV !== 'production') {
      console.error(action.payload);
    }

    return {
      ...state,
      isCreating: false,
    };
  },
  [actions.create{{ properCase name }}Success.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.create{{ properCase name }}Success>,
  ): {{ properCase name }}State => ({
    ...state,
    allIds: [...state.allIds, action.payload.id],
    byIds: {
      ...state.byIds,
      [action.payload.id]: action.payload,
    },
    isCreating: false,
  }),
  [actions.fetch{{ properCase name }}s.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}s>,
  ): {{ properCase name }}State => ({
    ...state,
    isFetching: action.payload,
  }),
  [actions.fetch{{ properCase name }}sError.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}sError>,
  ): {{ properCase name }}State => {
    if (process.env.NODE_ENV !== 'production') {
      console.error(action.payload);
    }

    return {
      ...state,
      isFetching: [],
    };
  },
  [actions.fetch{{ properCase name }}sSuccess.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}sSuccess>,
  ): {{ properCase name }}State => {
    const normalized{{ properCase name }}s = normalize({ {{ camelCase name }}s: action.payload });

    return {
      ...state,
      allIds: _union(state.allIds, normalized{{ properCase name }}s.result.{{ camelCase name }}s),
      byIds: {
        ...state.byIds,
        ...normalized{{ properCase name }}s.entities.{{ camelCase name }}s,
      },
      isFetching: [],
    };
  },
  [actions.fetch{{ properCase name }}.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}>,
  ): {{ properCase name }}State => ({
    ...state,
    isFetching: [action.payload],
  }),
  [actions.fetch{{ properCase name }}Error.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}Error>,
  ): {{ properCase name }}State => {
    if (process.env.NODE_ENV !== 'production') {
      console.error(action.payload);
    }

    return {
      ...state,
      isFetching: [],
    };
  },
  [actions.fetch{{ properCase name }}Success.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.fetch{{ properCase name }}Success>,
  ): {{ properCase name }}State => {
    const normalized{{ properCase name }}s = normalize({ {{ camelCase name }}s: [action.payload] });

    return {
      ...state,
      allIds: _union(state.allIds, normalized{{ properCase name }}s.result.{{ camelCase name }}s),
      byIds: {
        ...state.byIds,
        ...normalized{{ properCase name }}s.entities.{{ camelCase name }}s,
      },
      isFetching: [],
    };
  },
  [actions.update{{ properCase name }}.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.update{{ properCase name }}>,
  ): {{ properCase name }}State => ({
    ...state,
    isUpdating: action.payload.id,
  }),
  [actions.update{{ properCase name }}Error.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.update{{ properCase name }}Error>,
  ): {{ properCase name }}State => {
    if (process.env.NODE_ENV !== 'production') {
      console.error(action.payload);
    }

    return {
      ...state,
      isUpdating: '',
    };
  },
  [actions.update{{ properCase name }}Success.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.update{{ properCase name }}Success>,
  ): {{ properCase name }}State => {
    const {{ camelCase name }} = _merge(_cloneDeep(state.byIds[action.payload.id]), action.payload);
    const normalizedUsers = normalize({ {{ camelCase name }}s: [{{ camelCase name }}] });

    return {
      ...state,
      allIds: _union(state.allIds, normalizedUsers.result.{{ camelCase name }}s),
      byIds: {
        ...state.byIds,
        ...normalizedUsers.entities.{{ camelCase name }}s,
      },
      isUpdating: '',
    };
  },
  [actions.delete{{ properCase name }}.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.delete{{ properCase name }}>,
  ): {{ properCase name }}State => ({
    ...state,
    isDeleting: action.payload,
  }),
  [actions.delete{{ properCase name }}Error.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.delete{{ properCase name }}Error>,
  ): {{ properCase name }}State => {
    if (process.env.NODE_ENV !== 'production') {
      console.error(action.payload);
    }

    return {
      ...state,
      isDeleting: '',
    };
  },
  [actions.delete{{ properCase name }}Success.type]: (
    state: {{ properCase name }}State,
    action: ReturnType<typeof actions.delete{{ properCase name }}Success>,
  ): {{ properCase name }}State => {
    const byIds = { ...state.byIds };
    delete byIds[action.payload];

    return {
      ...state,
      allIds: _without(state.allIds, action.payload),
      byIds,
      isDeleting: '',
    };
  },
});
